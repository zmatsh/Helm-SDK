// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hapi/release/release.proto

package io.winhong.pass.hapi.release;

public final class ReleaseOuterClass {
  private ReleaseOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ReleaseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hapi.release.Release)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name is the name of the release
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name is the name of the release
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Info provides information about a release
     * </pre>
     *
     * <code>optional .hapi.release.Info info = 2;</code>
     */
    boolean hasInfo();
    /**
     * <pre>
     * Info provides information about a release
     * </pre>
     *
     * <code>optional .hapi.release.Info info = 2;</code>
     */
    io.winhong.pass.hapi.release.InfoOuterClass.Info getInfo();
    /**
     * <pre>
     * Info provides information about a release
     * </pre>
     *
     * <code>optional .hapi.release.Info info = 2;</code>
     */
    io.winhong.pass.hapi.release.InfoOuterClass.InfoOrBuilder getInfoOrBuilder();

    /**
     * <pre>
     * Chart is the chart that was released.
     * </pre>
     *
     * <code>optional .hapi.chart.Chart chart = 3;</code>
     */
    boolean hasChart();
    /**
     * <pre>
     * Chart is the chart that was released.
     * </pre>
     *
     * <code>optional .hapi.chart.Chart chart = 3;</code>
     */
    io.winhong.pass.hapi.chart.ChartOuterClass.Chart getChart();
    /**
     * <pre>
     * Chart is the chart that was released.
     * </pre>
     *
     * <code>optional .hapi.chart.Chart chart = 3;</code>
     */
    io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder getChartOrBuilder();

    /**
     * <pre>
     * Config is the set of extra Values added to the chart.
     * These values override the default values inside of the chart.
     * </pre>
     *
     * <code>optional .hapi.chart.Config config = 4;</code>
     */
    boolean hasConfig();
    /**
     * <pre>
     * Config is the set of extra Values added to the chart.
     * These values override the default values inside of the chart.
     * </pre>
     *
     * <code>optional .hapi.chart.Config config = 4;</code>
     */
    io.winhong.pass.hapi.chart.ConfigOuterClass.Config getConfig();
    /**
     * <pre>
     * Config is the set of extra Values added to the chart.
     * These values override the default values inside of the chart.
     * </pre>
     *
     * <code>optional .hapi.chart.Config config = 4;</code>
     */
    io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder getConfigOrBuilder();

    /**
     * <pre>
     * Manifest is the string representation of the rendered template.
     * </pre>
     *
     * <code>optional string manifest = 5;</code>
     */
    java.lang.String getManifest();
    /**
     * <pre>
     * Manifest is the string representation of the rendered template.
     * </pre>
     *
     * <code>optional string manifest = 5;</code>
     */
    com.google.protobuf.ByteString
        getManifestBytes();

    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    java.util.List<io.winhong.pass.hapi.release.HookOuterClass.Hook>
        getHooksList();
    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    io.winhong.pass.hapi.release.HookOuterClass.Hook getHooks(int index);
    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    int getHooksCount();
    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    java.util.List<? extends io.winhong.pass.hapi.release.HookOuterClass.HookOrBuilder>
        getHooksOrBuilderList();
    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    io.winhong.pass.hapi.release.HookOuterClass.HookOrBuilder getHooksOrBuilder(
        int index);

    /**
     * <pre>
     * Version is an int32 which represents the version of the release.
     * </pre>
     *
     * <code>optional int32 version = 7;</code>
     */
    int getVersion();

    /**
     * <pre>
     * Namespace is the kubernetes namespace of the release.
     * </pre>
     *
     * <code>optional string namespace = 8;</code>
     */
    java.lang.String getNamespace();
    /**
     * <pre>
     * Namespace is the kubernetes namespace of the release.
     * </pre>
     *
     * <code>optional string namespace = 8;</code>
     */
    com.google.protobuf.ByteString
        getNamespaceBytes();
  }
  /**
   * <pre>
   * Release describes a deployment of a chart, together with the chart
   * and the variables used to deploy that chart.
   * </pre>
   *
   * Protobuf type {@code hapi.release.Release}
   */
  public  static final class Release extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hapi.release.Release)
      ReleaseOrBuilder {
    // Use Release.newBuilder() to construct.
    private Release(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Release() {
      name_ = "";
      manifest_ = "";
      hooks_ = java.util.Collections.emptyList();
      version_ = 0;
      namespace_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Release(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              io.winhong.pass.hapi.release.InfoOuterClass.Info.Builder subBuilder = null;
              if (info_ != null) {
                subBuilder = info_.toBuilder();
              }
              info_ = input.readMessage(io.winhong.pass.hapi.release.InfoOuterClass.Info.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(info_);
                info_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder subBuilder = null;
              if (chart_ != null) {
                subBuilder = chart_.toBuilder();
              }
              chart_ = input.readMessage(io.winhong.pass.hapi.chart.ChartOuterClass.Chart.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(chart_);
                chart_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder subBuilder = null;
              if (config_ != null) {
                subBuilder = config_.toBuilder();
              }
              config_ = input.readMessage(io.winhong.pass.hapi.chart.ConfigOuterClass.Config.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(config_);
                config_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              manifest_ = s;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                hooks_ = new java.util.ArrayList<io.winhong.pass.hapi.release.HookOuterClass.Hook>();
                mutable_bitField0_ |= 0x00000020;
              }
              hooks_.add(
                  input.readMessage(io.winhong.pass.hapi.release.HookOuterClass.Hook.parser(), extensionRegistry));
              break;
            }
            case 56: {

              version_ = input.readInt32();
              break;
            }
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();

              namespace_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          hooks_ = java.util.Collections.unmodifiableList(hooks_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.winhong.pass.hapi.release.ReleaseOuterClass.internal_static_hapi_release_Release_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.winhong.pass.hapi.release.ReleaseOuterClass.internal_static_hapi_release_Release_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.winhong.pass.hapi.release.ReleaseOuterClass.Release.class, io.winhong.pass.hapi.release.ReleaseOuterClass.Release.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name is the name of the release
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name is the name of the release
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INFO_FIELD_NUMBER = 2;
    private io.winhong.pass.hapi.release.InfoOuterClass.Info info_;
    /**
     * <pre>
     * Info provides information about a release
     * </pre>
     *
     * <code>optional .hapi.release.Info info = 2;</code>
     */
    public boolean hasInfo() {
      return info_ != null;
    }
    /**
     * <pre>
     * Info provides information about a release
     * </pre>
     *
     * <code>optional .hapi.release.Info info = 2;</code>
     */
    public io.winhong.pass.hapi.release.InfoOuterClass.Info getInfo() {
      return info_ == null ? io.winhong.pass.hapi.release.InfoOuterClass.Info.getDefaultInstance() : info_;
    }
    /**
     * <pre>
     * Info provides information about a release
     * </pre>
     *
     * <code>optional .hapi.release.Info info = 2;</code>
     */
    public io.winhong.pass.hapi.release.InfoOuterClass.InfoOrBuilder getInfoOrBuilder() {
      return getInfo();
    }

    public static final int CHART_FIELD_NUMBER = 3;
    private io.winhong.pass.hapi.chart.ChartOuterClass.Chart chart_;
    /**
     * <pre>
     * Chart is the chart that was released.
     * </pre>
     *
     * <code>optional .hapi.chart.Chart chart = 3;</code>
     */
    public boolean hasChart() {
      return chart_ != null;
    }
    /**
     * <pre>
     * Chart is the chart that was released.
     * </pre>
     *
     * <code>optional .hapi.chart.Chart chart = 3;</code>
     */
    public io.winhong.pass.hapi.chart.ChartOuterClass.Chart getChart() {
      return chart_ == null ? io.winhong.pass.hapi.chart.ChartOuterClass.Chart.getDefaultInstance() : chart_;
    }
    /**
     * <pre>
     * Chart is the chart that was released.
     * </pre>
     *
     * <code>optional .hapi.chart.Chart chart = 3;</code>
     */
    public io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder getChartOrBuilder() {
      return getChart();
    }

    public static final int CONFIG_FIELD_NUMBER = 4;
    private io.winhong.pass.hapi.chart.ConfigOuterClass.Config config_;
    /**
     * <pre>
     * Config is the set of extra Values added to the chart.
     * These values override the default values inside of the chart.
     * </pre>
     *
     * <code>optional .hapi.chart.Config config = 4;</code>
     */
    public boolean hasConfig() {
      return config_ != null;
    }
    /**
     * <pre>
     * Config is the set of extra Values added to the chart.
     * These values override the default values inside of the chart.
     * </pre>
     *
     * <code>optional .hapi.chart.Config config = 4;</code>
     */
    public io.winhong.pass.hapi.chart.ConfigOuterClass.Config getConfig() {
      return config_ == null ? io.winhong.pass.hapi.chart.ConfigOuterClass.Config.getDefaultInstance() : config_;
    }
    /**
     * <pre>
     * Config is the set of extra Values added to the chart.
     * These values override the default values inside of the chart.
     * </pre>
     *
     * <code>optional .hapi.chart.Config config = 4;</code>
     */
    public io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder getConfigOrBuilder() {
      return getConfig();
    }

    public static final int MANIFEST_FIELD_NUMBER = 5;
    private volatile java.lang.Object manifest_;
    /**
     * <pre>
     * Manifest is the string representation of the rendered template.
     * </pre>
     *
     * <code>optional string manifest = 5;</code>
     */
    public java.lang.String getManifest() {
      java.lang.Object ref = manifest_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        manifest_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Manifest is the string representation of the rendered template.
     * </pre>
     *
     * <code>optional string manifest = 5;</code>
     */
    public com.google.protobuf.ByteString
        getManifestBytes() {
      java.lang.Object ref = manifest_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        manifest_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HOOKS_FIELD_NUMBER = 6;
    private java.util.List<io.winhong.pass.hapi.release.HookOuterClass.Hook> hooks_;
    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    public java.util.List<io.winhong.pass.hapi.release.HookOuterClass.Hook> getHooksList() {
      return hooks_;
    }
    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    public java.util.List<? extends io.winhong.pass.hapi.release.HookOuterClass.HookOrBuilder>
        getHooksOrBuilderList() {
      return hooks_;
    }
    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    public int getHooksCount() {
      return hooks_.size();
    }
    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    public io.winhong.pass.hapi.release.HookOuterClass.Hook getHooks(int index) {
      return hooks_.get(index);
    }
    /**
     * <pre>
     * Hooks are all of the hooks declared for this release.
     * </pre>
     *
     * <code>repeated .hapi.release.Hook hooks = 6;</code>
     */
    public io.winhong.pass.hapi.release.HookOuterClass.HookOrBuilder getHooksOrBuilder(
        int index) {
      return hooks_.get(index);
    }

    public static final int VERSION_FIELD_NUMBER = 7;
    private int version_;
    /**
     * <pre>
     * Version is an int32 which represents the version of the release.
     * </pre>
     *
     * <code>optional int32 version = 7;</code>
     */
    public int getVersion() {
      return version_;
    }

    public static final int NAMESPACE_FIELD_NUMBER = 8;
    private volatile java.lang.Object namespace_;
    /**
     * <pre>
     * Namespace is the kubernetes namespace of the release.
     * </pre>
     *
     * <code>optional string namespace = 8;</code>
     */
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Namespace is the kubernetes namespace of the release.
     * </pre>
     *
     * <code>optional string namespace = 8;</code>
     */
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (info_ != null) {
        output.writeMessage(2, getInfo());
      }
      if (chart_ != null) {
        output.writeMessage(3, getChart());
      }
      if (config_ != null) {
        output.writeMessage(4, getConfig());
      }
      if (!getManifestBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, manifest_);
      }
      for (int i = 0; i < hooks_.size(); i++) {
        output.writeMessage(6, hooks_.get(i));
      }
      if (version_ != 0) {
        output.writeInt32(7, version_);
      }
      if (!getNamespaceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, namespace_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (info_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getInfo());
      }
      if (chart_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getChart());
      }
      if (config_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getConfig());
      }
      if (!getManifestBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, manifest_);
      }
      for (int i = 0; i < hooks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, hooks_.get(i));
      }
      if (version_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, version_);
      }
      if (!getNamespaceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, namespace_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.winhong.pass.hapi.release.ReleaseOuterClass.Release)) {
        return super.equals(obj);
      }
      io.winhong.pass.hapi.release.ReleaseOuterClass.Release other = (io.winhong.pass.hapi.release.ReleaseOuterClass.Release) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && (hasInfo() == other.hasInfo());
      if (hasInfo()) {
        result = result && getInfo()
            .equals(other.getInfo());
      }
      result = result && (hasChart() == other.hasChart());
      if (hasChart()) {
        result = result && getChart()
            .equals(other.getChart());
      }
      result = result && (hasConfig() == other.hasConfig());
      if (hasConfig()) {
        result = result && getConfig()
            .equals(other.getConfig());
      }
      result = result && getManifest()
          .equals(other.getManifest());
      result = result && getHooksList()
          .equals(other.getHooksList());
      result = result && (getVersion()
          == other.getVersion());
      result = result && getNamespace()
          .equals(other.getNamespace());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasInfo()) {
        hash = (37 * hash) + INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInfo().hashCode();
      }
      if (hasChart()) {
        hash = (37 * hash) + CHART_FIELD_NUMBER;
        hash = (53 * hash) + getChart().hashCode();
      }
      if (hasConfig()) {
        hash = (37 * hash) + CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getConfig().hashCode();
      }
      hash = (37 * hash) + MANIFEST_FIELD_NUMBER;
      hash = (53 * hash) + getManifest().hashCode();
      if (getHooksCount() > 0) {
        hash = (37 * hash) + HOOKS_FIELD_NUMBER;
        hash = (53 * hash) + getHooksList().hashCode();
      }
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion();
      hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
      hash = (53 * hash) + getNamespace().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.winhong.pass.hapi.release.ReleaseOuterClass.Release prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Release describes a deployment of a chart, together with the chart
     * and the variables used to deploy that chart.
     * </pre>
     *
     * Protobuf type {@code hapi.release.Release}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hapi.release.Release)
        io.winhong.pass.hapi.release.ReleaseOuterClass.ReleaseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.winhong.pass.hapi.release.ReleaseOuterClass.internal_static_hapi_release_Release_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.winhong.pass.hapi.release.ReleaseOuterClass.internal_static_hapi_release_Release_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.winhong.pass.hapi.release.ReleaseOuterClass.Release.class, io.winhong.pass.hapi.release.ReleaseOuterClass.Release.Builder.class);
      }

      // Construct using io.winhong.pass.hapi.release.ReleaseOuterClass.Release.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHooksFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        if (infoBuilder_ == null) {
          info_ = null;
        } else {
          info_ = null;
          infoBuilder_ = null;
        }
        if (chartBuilder_ == null) {
          chart_ = null;
        } else {
          chart_ = null;
          chartBuilder_ = null;
        }
        if (configBuilder_ == null) {
          config_ = null;
        } else {
          config_ = null;
          configBuilder_ = null;
        }
        manifest_ = "";

        if (hooksBuilder_ == null) {
          hooks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          hooksBuilder_.clear();
        }
        version_ = 0;

        namespace_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.winhong.pass.hapi.release.ReleaseOuterClass.internal_static_hapi_release_Release_descriptor;
      }

      public io.winhong.pass.hapi.release.ReleaseOuterClass.Release getDefaultInstanceForType() {
        return io.winhong.pass.hapi.release.ReleaseOuterClass.Release.getDefaultInstance();
      }

      public io.winhong.pass.hapi.release.ReleaseOuterClass.Release build() {
        io.winhong.pass.hapi.release.ReleaseOuterClass.Release result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.winhong.pass.hapi.release.ReleaseOuterClass.Release buildPartial() {
        io.winhong.pass.hapi.release.ReleaseOuterClass.Release result = new io.winhong.pass.hapi.release.ReleaseOuterClass.Release(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.name_ = name_;
        if (infoBuilder_ == null) {
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        if (chartBuilder_ == null) {
          result.chart_ = chart_;
        } else {
          result.chart_ = chartBuilder_.build();
        }
        if (configBuilder_ == null) {
          result.config_ = config_;
        } else {
          result.config_ = configBuilder_.build();
        }
        result.manifest_ = manifest_;
        if (hooksBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            hooks_ = java.util.Collections.unmodifiableList(hooks_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.hooks_ = hooks_;
        } else {
          result.hooks_ = hooksBuilder_.build();
        }
        result.version_ = version_;
        result.namespace_ = namespace_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.winhong.pass.hapi.release.ReleaseOuterClass.Release) {
          return mergeFrom((io.winhong.pass.hapi.release.ReleaseOuterClass.Release)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.winhong.pass.hapi.release.ReleaseOuterClass.Release other) {
        if (other == io.winhong.pass.hapi.release.ReleaseOuterClass.Release.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.hasInfo()) {
          mergeInfo(other.getInfo());
        }
        if (other.hasChart()) {
          mergeChart(other.getChart());
        }
        if (other.hasConfig()) {
          mergeConfig(other.getConfig());
        }
        if (!other.getManifest().isEmpty()) {
          manifest_ = other.manifest_;
          onChanged();
        }
        if (hooksBuilder_ == null) {
          if (!other.hooks_.isEmpty()) {
            if (hooks_.isEmpty()) {
              hooks_ = other.hooks_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureHooksIsMutable();
              hooks_.addAll(other.hooks_);
            }
            onChanged();
          }
        } else {
          if (!other.hooks_.isEmpty()) {
            if (hooksBuilder_.isEmpty()) {
              hooksBuilder_.dispose();
              hooksBuilder_ = null;
              hooks_ = other.hooks_;
              bitField0_ = (bitField0_ & ~0x00000020);
              hooksBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getHooksFieldBuilder() : null;
            } else {
              hooksBuilder_.addAllMessages(other.hooks_);
            }
          }
        }
        if (other.getVersion() != 0) {
          setVersion(other.getVersion());
        }
        if (!other.getNamespace().isEmpty()) {
          namespace_ = other.namespace_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.winhong.pass.hapi.release.ReleaseOuterClass.Release parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.winhong.pass.hapi.release.ReleaseOuterClass.Release) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name is the name of the release
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name is the name of the release
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name is the name of the release
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name is the name of the release
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name is the name of the release
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private io.winhong.pass.hapi.release.InfoOuterClass.Info info_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.release.InfoOuterClass.Info, io.winhong.pass.hapi.release.InfoOuterClass.Info.Builder, io.winhong.pass.hapi.release.InfoOuterClass.InfoOrBuilder> infoBuilder_;
      /**
       * <pre>
       * Info provides information about a release
       * </pre>
       *
       * <code>optional .hapi.release.Info info = 2;</code>
       */
      public boolean hasInfo() {
        return infoBuilder_ != null || info_ != null;
      }
      /**
       * <pre>
       * Info provides information about a release
       * </pre>
       *
       * <code>optional .hapi.release.Info info = 2;</code>
       */
      public io.winhong.pass.hapi.release.InfoOuterClass.Info getInfo() {
        if (infoBuilder_ == null) {
          return info_ == null ? io.winhong.pass.hapi.release.InfoOuterClass.Info.getDefaultInstance() : info_;
        } else {
          return infoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Info provides information about a release
       * </pre>
       *
       * <code>optional .hapi.release.Info info = 2;</code>
       */
      public Builder setInfo(io.winhong.pass.hapi.release.InfoOuterClass.Info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          info_ = value;
          onChanged();
        } else {
          infoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Info provides information about a release
       * </pre>
       *
       * <code>optional .hapi.release.Info info = 2;</code>
       */
      public Builder setInfo(
          io.winhong.pass.hapi.release.InfoOuterClass.Info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          info_ = builderForValue.build();
          onChanged();
        } else {
          infoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Info provides information about a release
       * </pre>
       *
       * <code>optional .hapi.release.Info info = 2;</code>
       */
      public Builder mergeInfo(io.winhong.pass.hapi.release.InfoOuterClass.Info value) {
        if (infoBuilder_ == null) {
          if (info_ != null) {
            info_ =
              io.winhong.pass.hapi.release.InfoOuterClass.Info.newBuilder(info_).mergeFrom(value).buildPartial();
          } else {
            info_ = value;
          }
          onChanged();
        } else {
          infoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Info provides information about a release
       * </pre>
       *
       * <code>optional .hapi.release.Info info = 2;</code>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = null;
          onChanged();
        } else {
          info_ = null;
          infoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Info provides information about a release
       * </pre>
       *
       * <code>optional .hapi.release.Info info = 2;</code>
       */
      public io.winhong.pass.hapi.release.InfoOuterClass.Info.Builder getInfoBuilder() {
        
        onChanged();
        return getInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Info provides information about a release
       * </pre>
       *
       * <code>optional .hapi.release.Info info = 2;</code>
       */
      public io.winhong.pass.hapi.release.InfoOuterClass.InfoOrBuilder getInfoOrBuilder() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilder();
        } else {
          return info_ == null ?
              io.winhong.pass.hapi.release.InfoOuterClass.Info.getDefaultInstance() : info_;
        }
      }
      /**
       * <pre>
       * Info provides information about a release
       * </pre>
       *
       * <code>optional .hapi.release.Info info = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.release.InfoOuterClass.Info, io.winhong.pass.hapi.release.InfoOuterClass.Info.Builder, io.winhong.pass.hapi.release.InfoOuterClass.InfoOrBuilder>
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.winhong.pass.hapi.release.InfoOuterClass.Info, io.winhong.pass.hapi.release.InfoOuterClass.Info.Builder, io.winhong.pass.hapi.release.InfoOuterClass.InfoOrBuilder>(
                  getInfo(),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      private io.winhong.pass.hapi.chart.ChartOuterClass.Chart chart_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.chart.ChartOuterClass.Chart, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder, io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder> chartBuilder_;
      /**
       * <pre>
       * Chart is the chart that was released.
       * </pre>
       *
       * <code>optional .hapi.chart.Chart chart = 3;</code>
       */
      public boolean hasChart() {
        return chartBuilder_ != null || chart_ != null;
      }
      /**
       * <pre>
       * Chart is the chart that was released.
       * </pre>
       *
       * <code>optional .hapi.chart.Chart chart = 3;</code>
       */
      public io.winhong.pass.hapi.chart.ChartOuterClass.Chart getChart() {
        if (chartBuilder_ == null) {
          return chart_ == null ? io.winhong.pass.hapi.chart.ChartOuterClass.Chart.getDefaultInstance() : chart_;
        } else {
          return chartBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Chart is the chart that was released.
       * </pre>
       *
       * <code>optional .hapi.chart.Chart chart = 3;</code>
       */
      public Builder setChart(io.winhong.pass.hapi.chart.ChartOuterClass.Chart value) {
        if (chartBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chart_ = value;
          onChanged();
        } else {
          chartBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Chart is the chart that was released.
       * </pre>
       *
       * <code>optional .hapi.chart.Chart chart = 3;</code>
       */
      public Builder setChart(
          io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder builderForValue) {
        if (chartBuilder_ == null) {
          chart_ = builderForValue.build();
          onChanged();
        } else {
          chartBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Chart is the chart that was released.
       * </pre>
       *
       * <code>optional .hapi.chart.Chart chart = 3;</code>
       */
      public Builder mergeChart(io.winhong.pass.hapi.chart.ChartOuterClass.Chart value) {
        if (chartBuilder_ == null) {
          if (chart_ != null) {
            chart_ =
              io.winhong.pass.hapi.chart.ChartOuterClass.Chart.newBuilder(chart_).mergeFrom(value).buildPartial();
          } else {
            chart_ = value;
          }
          onChanged();
        } else {
          chartBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Chart is the chart that was released.
       * </pre>
       *
       * <code>optional .hapi.chart.Chart chart = 3;</code>
       */
      public Builder clearChart() {
        if (chartBuilder_ == null) {
          chart_ = null;
          onChanged();
        } else {
          chart_ = null;
          chartBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Chart is the chart that was released.
       * </pre>
       *
       * <code>optional .hapi.chart.Chart chart = 3;</code>
       */
      public io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder getChartBuilder() {
        
        onChanged();
        return getChartFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Chart is the chart that was released.
       * </pre>
       *
       * <code>optional .hapi.chart.Chart chart = 3;</code>
       */
      public io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder getChartOrBuilder() {
        if (chartBuilder_ != null) {
          return chartBuilder_.getMessageOrBuilder();
        } else {
          return chart_ == null ?
              io.winhong.pass.hapi.chart.ChartOuterClass.Chart.getDefaultInstance() : chart_;
        }
      }
      /**
       * <pre>
       * Chart is the chart that was released.
       * </pre>
       *
       * <code>optional .hapi.chart.Chart chart = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.chart.ChartOuterClass.Chart, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder, io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder>
          getChartFieldBuilder() {
        if (chartBuilder_ == null) {
          chartBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.winhong.pass.hapi.chart.ChartOuterClass.Chart, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder, io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder>(
                  getChart(),
                  getParentForChildren(),
                  isClean());
          chart_ = null;
        }
        return chartBuilder_;
      }

      private io.winhong.pass.hapi.chart.ConfigOuterClass.Config config_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.chart.ConfigOuterClass.Config, io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder, io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder> configBuilder_;
      /**
       * <pre>
       * Config is the set of extra Values added to the chart.
       * These values override the default values inside of the chart.
       * </pre>
       *
       * <code>optional .hapi.chart.Config config = 4;</code>
       */
      public boolean hasConfig() {
        return configBuilder_ != null || config_ != null;
      }
      /**
       * <pre>
       * Config is the set of extra Values added to the chart.
       * These values override the default values inside of the chart.
       * </pre>
       *
       * <code>optional .hapi.chart.Config config = 4;</code>
       */
      public io.winhong.pass.hapi.chart.ConfigOuterClass.Config getConfig() {
        if (configBuilder_ == null) {
          return config_ == null ? io.winhong.pass.hapi.chart.ConfigOuterClass.Config.getDefaultInstance() : config_;
        } else {
          return configBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Config is the set of extra Values added to the chart.
       * These values override the default values inside of the chart.
       * </pre>
       *
       * <code>optional .hapi.chart.Config config = 4;</code>
       */
      public Builder setConfig(io.winhong.pass.hapi.chart.ConfigOuterClass.Config value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          configBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config is the set of extra Values added to the chart.
       * These values override the default values inside of the chart.
       * </pre>
       *
       * <code>optional .hapi.chart.Config config = 4;</code>
       */
      public Builder setConfig(
          io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder builderForValue) {
        if (configBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          configBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Config is the set of extra Values added to the chart.
       * These values override the default values inside of the chart.
       * </pre>
       *
       * <code>optional .hapi.chart.Config config = 4;</code>
       */
      public Builder mergeConfig(io.winhong.pass.hapi.chart.ConfigOuterClass.Config value) {
        if (configBuilder_ == null) {
          if (config_ != null) {
            config_ =
              io.winhong.pass.hapi.chart.ConfigOuterClass.Config.newBuilder(config_).mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          configBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config is the set of extra Values added to the chart.
       * These values override the default values inside of the chart.
       * </pre>
       *
       * <code>optional .hapi.chart.Config config = 4;</code>
       */
      public Builder clearConfig() {
        if (configBuilder_ == null) {
          config_ = null;
          onChanged();
        } else {
          config_ = null;
          configBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Config is the set of extra Values added to the chart.
       * These values override the default values inside of the chart.
       * </pre>
       *
       * <code>optional .hapi.chart.Config config = 4;</code>
       */
      public io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder getConfigBuilder() {
        
        onChanged();
        return getConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Config is the set of extra Values added to the chart.
       * These values override the default values inside of the chart.
       * </pre>
       *
       * <code>optional .hapi.chart.Config config = 4;</code>
       */
      public io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder getConfigOrBuilder() {
        if (configBuilder_ != null) {
          return configBuilder_.getMessageOrBuilder();
        } else {
          return config_ == null ?
              io.winhong.pass.hapi.chart.ConfigOuterClass.Config.getDefaultInstance() : config_;
        }
      }
      /**
       * <pre>
       * Config is the set of extra Values added to the chart.
       * These values override the default values inside of the chart.
       * </pre>
       *
       * <code>optional .hapi.chart.Config config = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.chart.ConfigOuterClass.Config, io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder, io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder>
          getConfigFieldBuilder() {
        if (configBuilder_ == null) {
          configBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.winhong.pass.hapi.chart.ConfigOuterClass.Config, io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder, io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder>(
                  getConfig(),
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        return configBuilder_;
      }

      private java.lang.Object manifest_ = "";
      /**
       * <pre>
       * Manifest is the string representation of the rendered template.
       * </pre>
       *
       * <code>optional string manifest = 5;</code>
       */
      public java.lang.String getManifest() {
        java.lang.Object ref = manifest_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          manifest_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Manifest is the string representation of the rendered template.
       * </pre>
       *
       * <code>optional string manifest = 5;</code>
       */
      public com.google.protobuf.ByteString
          getManifestBytes() {
        java.lang.Object ref = manifest_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          manifest_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Manifest is the string representation of the rendered template.
       * </pre>
       *
       * <code>optional string manifest = 5;</code>
       */
      public Builder setManifest(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        manifest_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Manifest is the string representation of the rendered template.
       * </pre>
       *
       * <code>optional string manifest = 5;</code>
       */
      public Builder clearManifest() {
        
        manifest_ = getDefaultInstance().getManifest();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Manifest is the string representation of the rendered template.
       * </pre>
       *
       * <code>optional string manifest = 5;</code>
       */
      public Builder setManifestBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        manifest_ = value;
        onChanged();
        return this;
      }

      private java.util.List<io.winhong.pass.hapi.release.HookOuterClass.Hook> hooks_ =
        java.util.Collections.emptyList();
      private void ensureHooksIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          hooks_ = new java.util.ArrayList<io.winhong.pass.hapi.release.HookOuterClass.Hook>(hooks_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.winhong.pass.hapi.release.HookOuterClass.Hook, io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder, io.winhong.pass.hapi.release.HookOuterClass.HookOrBuilder> hooksBuilder_;

      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public java.util.List<io.winhong.pass.hapi.release.HookOuterClass.Hook> getHooksList() {
        if (hooksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(hooks_);
        } else {
          return hooksBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public int getHooksCount() {
        if (hooksBuilder_ == null) {
          return hooks_.size();
        } else {
          return hooksBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public io.winhong.pass.hapi.release.HookOuterClass.Hook getHooks(int index) {
        if (hooksBuilder_ == null) {
          return hooks_.get(index);
        } else {
          return hooksBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public Builder setHooks(
          int index, io.winhong.pass.hapi.release.HookOuterClass.Hook value) {
        if (hooksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHooksIsMutable();
          hooks_.set(index, value);
          onChanged();
        } else {
          hooksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public Builder setHooks(
          int index, io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder builderForValue) {
        if (hooksBuilder_ == null) {
          ensureHooksIsMutable();
          hooks_.set(index, builderForValue.build());
          onChanged();
        } else {
          hooksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public Builder addHooks(io.winhong.pass.hapi.release.HookOuterClass.Hook value) {
        if (hooksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHooksIsMutable();
          hooks_.add(value);
          onChanged();
        } else {
          hooksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public Builder addHooks(
          int index, io.winhong.pass.hapi.release.HookOuterClass.Hook value) {
        if (hooksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHooksIsMutable();
          hooks_.add(index, value);
          onChanged();
        } else {
          hooksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public Builder addHooks(
          io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder builderForValue) {
        if (hooksBuilder_ == null) {
          ensureHooksIsMutable();
          hooks_.add(builderForValue.build());
          onChanged();
        } else {
          hooksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public Builder addHooks(
          int index, io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder builderForValue) {
        if (hooksBuilder_ == null) {
          ensureHooksIsMutable();
          hooks_.add(index, builderForValue.build());
          onChanged();
        } else {
          hooksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public Builder addAllHooks(
          java.lang.Iterable<? extends io.winhong.pass.hapi.release.HookOuterClass.Hook> values) {
        if (hooksBuilder_ == null) {
          ensureHooksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, hooks_);
          onChanged();
        } else {
          hooksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public Builder clearHooks() {
        if (hooksBuilder_ == null) {
          hooks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          hooksBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public Builder removeHooks(int index) {
        if (hooksBuilder_ == null) {
          ensureHooksIsMutable();
          hooks_.remove(index);
          onChanged();
        } else {
          hooksBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder getHooksBuilder(
          int index) {
        return getHooksFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public io.winhong.pass.hapi.release.HookOuterClass.HookOrBuilder getHooksOrBuilder(
          int index) {
        if (hooksBuilder_ == null) {
          return hooks_.get(index);  } else {
          return hooksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public java.util.List<? extends io.winhong.pass.hapi.release.HookOuterClass.HookOrBuilder>
           getHooksOrBuilderList() {
        if (hooksBuilder_ != null) {
          return hooksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(hooks_);
        }
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder addHooksBuilder() {
        return getHooksFieldBuilder().addBuilder(
            io.winhong.pass.hapi.release.HookOuterClass.Hook.getDefaultInstance());
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder addHooksBuilder(
          int index) {
        return getHooksFieldBuilder().addBuilder(
            index, io.winhong.pass.hapi.release.HookOuterClass.Hook.getDefaultInstance());
      }
      /**
       * <pre>
       * Hooks are all of the hooks declared for this release.
       * </pre>
       *
       * <code>repeated .hapi.release.Hook hooks = 6;</code>
       */
      public java.util.List<io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder>
           getHooksBuilderList() {
        return getHooksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.winhong.pass.hapi.release.HookOuterClass.Hook, io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder, io.winhong.pass.hapi.release.HookOuterClass.HookOrBuilder>
          getHooksFieldBuilder() {
        if (hooksBuilder_ == null) {
          hooksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.winhong.pass.hapi.release.HookOuterClass.Hook, io.winhong.pass.hapi.release.HookOuterClass.Hook.Builder, io.winhong.pass.hapi.release.HookOuterClass.HookOrBuilder>(
                  hooks_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          hooks_ = null;
        }
        return hooksBuilder_;
      }

      private int version_ ;
      /**
       * <pre>
       * Version is an int32 which represents the version of the release.
       * </pre>
       *
       * <code>optional int32 version = 7;</code>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <pre>
       * Version is an int32 which represents the version of the release.
       * </pre>
       *
       * <code>optional int32 version = 7;</code>
       */
      public Builder setVersion(int value) {
        
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Version is an int32 which represents the version of the release.
       * </pre>
       *
       * <code>optional int32 version = 7;</code>
       */
      public Builder clearVersion() {
        
        version_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object namespace_ = "";
      /**
       * <pre>
       * Namespace is the kubernetes namespace of the release.
       * </pre>
       *
       * <code>optional string namespace = 8;</code>
       */
      public java.lang.String getNamespace() {
        java.lang.Object ref = namespace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          namespace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Namespace is the kubernetes namespace of the release.
       * </pre>
       *
       * <code>optional string namespace = 8;</code>
       */
      public com.google.protobuf.ByteString
          getNamespaceBytes() {
        java.lang.Object ref = namespace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          namespace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Namespace is the kubernetes namespace of the release.
       * </pre>
       *
       * <code>optional string namespace = 8;</code>
       */
      public Builder setNamespace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        namespace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Namespace is the kubernetes namespace of the release.
       * </pre>
       *
       * <code>optional string namespace = 8;</code>
       */
      public Builder clearNamespace() {
        
        namespace_ = getDefaultInstance().getNamespace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Namespace is the kubernetes namespace of the release.
       * </pre>
       *
       * <code>optional string namespace = 8;</code>
       */
      public Builder setNamespaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        namespace_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hapi.release.Release)
    }

    // @@protoc_insertion_point(class_scope:hapi.release.Release)
    private static final io.winhong.pass.hapi.release.ReleaseOuterClass.Release DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.winhong.pass.hapi.release.ReleaseOuterClass.Release();
    }

    public static io.winhong.pass.hapi.release.ReleaseOuterClass.Release getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Release>
        PARSER = new com.google.protobuf.AbstractParser<Release>() {
      public Release parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Release(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Release> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Release> getParserForType() {
      return PARSER;
    }

    public io.winhong.pass.hapi.release.ReleaseOuterClass.Release getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hapi_release_Release_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hapi_release_Release_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032hapi/release/release.proto\022\014hapi.relea" +
      "se\032\027hapi/release/hook.proto\032\027hapi/releas" +
      "e/info.proto\032\027hapi/chart/config.proto\032\026h" +
      "api/chart/chart.proto\"\330\001\n\007Release\022\014\n\004nam" +
      "e\030\001 \001(\t\022 \n\004info\030\002 \001(\0132\022.hapi.release.Inf" +
      "o\022 \n\005chart\030\003 \001(\0132\021.hapi.chart.Chart\022\"\n\006c" +
      "onfig\030\004 \001(\0132\022.hapi.chart.Config\022\020\n\010manif" +
      "est\030\005 \001(\t\022!\n\005hooks\030\006 \003(\0132\022.hapi.release." +
      "Hook\022\017\n\007version\030\007 \001(\005\022\021\n\tnamespace\030\010 \001(\t" +
      "B%\n#io.winhong.pass.hapi.releaseb",
      "\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.winhong.pass.hapi.release.HookOuterClass.getDescriptor(),
          io.winhong.pass.hapi.release.InfoOuterClass.getDescriptor(),
          io.winhong.pass.hapi.chart.ConfigOuterClass.getDescriptor(),
          io.winhong.pass.hapi.chart.ChartOuterClass.getDescriptor(),
        }, assigner);
    internal_static_hapi_release_Release_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_hapi_release_Release_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hapi_release_Release_descriptor,
        new java.lang.String[] { "Name", "Info", "Chart", "Config", "Manifest", "Hooks", "Version", "Namespace", });
    io.winhong.pass.hapi.release.HookOuterClass.getDescriptor();
    io.winhong.pass.hapi.release.InfoOuterClass.getDescriptor();
    io.winhong.pass.hapi.chart.ConfigOuterClass.getDescriptor();
    io.winhong.pass.hapi.chart.ChartOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
