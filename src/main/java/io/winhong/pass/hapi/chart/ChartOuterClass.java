// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hapi/chart/chart.proto

package io.winhong.pass.hapi.chart;

public final class ChartOuterClass {
  private ChartOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ChartOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hapi.chart.Chart)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Contents of the Chartfile.
     * </pre>
     *
     * <code>optional .hapi.chart.Metadata metadata = 1;</code>
     */
    boolean hasMetadata();
    /**
     * <pre>
     * Contents of the Chartfile.
     * </pre>
     *
     * <code>optional .hapi.chart.Metadata metadata = 1;</code>
     */
    io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata getMetadata();
    /**
     * <pre>
     * Contents of the Chartfile.
     * </pre>
     *
     * <code>optional .hapi.chart.Metadata metadata = 1;</code>
     */
    io.winhong.pass.hapi.chart.MetadataOuterClass.MetadataOrBuilder getMetadataOrBuilder();

    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    java.util.List<io.winhong.pass.hapi.chart.TemplateOuterClass.Template>
        getTemplatesList();
    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    io.winhong.pass.hapi.chart.TemplateOuterClass.Template getTemplates(int index);
    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    int getTemplatesCount();
    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    java.util.List<? extends io.winhong.pass.hapi.chart.TemplateOuterClass.TemplateOrBuilder>
        getTemplatesOrBuilderList();
    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    io.winhong.pass.hapi.chart.TemplateOuterClass.TemplateOrBuilder getTemplatesOrBuilder(
        int index);

    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    java.util.List<io.winhong.pass.hapi.chart.ChartOuterClass.Chart>
        getDependenciesList();
    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    io.winhong.pass.hapi.chart.ChartOuterClass.Chart getDependencies(int index);
    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    int getDependenciesCount();
    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    java.util.List<? extends io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder>
        getDependenciesOrBuilderList();
    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder getDependenciesOrBuilder(
        int index);

    /**
     * <pre>
     * Default config for this template.
     * </pre>
     *
     * <code>optional .hapi.chart.Config values = 4;</code>
     */
    boolean hasValues();
    /**
     * <pre>
     * Default config for this template.
     * </pre>
     *
     * <code>optional .hapi.chart.Config values = 4;</code>
     */
    io.winhong.pass.hapi.chart.ConfigOuterClass.Config getValues();
    /**
     * <pre>
     * Default config for this template.
     * </pre>
     *
     * <code>optional .hapi.chart.Config values = 4;</code>
     */
    io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder getValuesOrBuilder();

    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    java.util.List<com.google.protobuf.Any> 
        getFilesList();
    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    com.google.protobuf.Any getFiles(int index);
    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    int getFilesCount();
    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
        getFilesOrBuilderList();
    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    com.google.protobuf.AnyOrBuilder getFilesOrBuilder(
        int index);
  }
  /**
   * <pre>
   *	Chart is a helm package that contains metadata, a default config, zero or more
   *	optionally parameterizable templates, and zero or more charts (dependencies).
   * </pre>
   *
   * Protobuf type {@code hapi.chart.Chart}
   */
  public  static final class Chart extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hapi.chart.Chart)
      ChartOrBuilder {
    // Use Chart.newBuilder() to construct.
    private Chart(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Chart() {
      templates_ = java.util.Collections.emptyList();
      dependencies_ = java.util.Collections.emptyList();
      files_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Chart(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.Builder subBuilder = null;
              if (metadata_ != null) {
                subBuilder = metadata_.toBuilder();
              }
              metadata_ = input.readMessage(io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(metadata_);
                metadata_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                templates_ = new java.util.ArrayList<io.winhong.pass.hapi.chart.TemplateOuterClass.Template>();
                mutable_bitField0_ |= 0x00000002;
              }
              templates_.add(
                  input.readMessage(io.winhong.pass.hapi.chart.TemplateOuterClass.Template.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                dependencies_ = new java.util.ArrayList<io.winhong.pass.hapi.chart.ChartOuterClass.Chart>();
                mutable_bitField0_ |= 0x00000004;
              }
              dependencies_.add(
                  input.readMessage(io.winhong.pass.hapi.chart.ChartOuterClass.Chart.parser(), extensionRegistry));
              break;
            }
            case 34: {
              io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder subBuilder = null;
              if (values_ != null) {
                subBuilder = values_.toBuilder();
              }
              values_ = input.readMessage(io.winhong.pass.hapi.chart.ConfigOuterClass.Config.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(values_);
                values_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                files_ = new java.util.ArrayList<com.google.protobuf.Any>();
                mutable_bitField0_ |= 0x00000010;
              }
              files_.add(
                  input.readMessage(com.google.protobuf.Any.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          templates_ = java.util.Collections.unmodifiableList(templates_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          dependencies_ = java.util.Collections.unmodifiableList(dependencies_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          files_ = java.util.Collections.unmodifiableList(files_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.winhong.pass.hapi.chart.ChartOuterClass.internal_static_hapi_chart_Chart_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.winhong.pass.hapi.chart.ChartOuterClass.internal_static_hapi_chart_Chart_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.winhong.pass.hapi.chart.ChartOuterClass.Chart.class, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder.class);
    }

    private int bitField0_;
    public static final int METADATA_FIELD_NUMBER = 1;
    private io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata metadata_;
    /**
     * <pre>
     * Contents of the Chartfile.
     * </pre>
     *
     * <code>optional .hapi.chart.Metadata metadata = 1;</code>
     */
    public boolean hasMetadata() {
      return metadata_ != null;
    }
    /**
     * <pre>
     * Contents of the Chartfile.
     * </pre>
     *
     * <code>optional .hapi.chart.Metadata metadata = 1;</code>
     */
    public io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata getMetadata() {
      return metadata_ == null ? io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.getDefaultInstance() : metadata_;
    }
    /**
     * <pre>
     * Contents of the Chartfile.
     * </pre>
     *
     * <code>optional .hapi.chart.Metadata metadata = 1;</code>
     */
    public io.winhong.pass.hapi.chart.MetadataOuterClass.MetadataOrBuilder getMetadataOrBuilder() {
      return getMetadata();
    }

    public static final int TEMPLATES_FIELD_NUMBER = 2;
    private java.util.List<io.winhong.pass.hapi.chart.TemplateOuterClass.Template> templates_;
    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    public java.util.List<io.winhong.pass.hapi.chart.TemplateOuterClass.Template> getTemplatesList() {
      return templates_;
    }
    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    public java.util.List<? extends io.winhong.pass.hapi.chart.TemplateOuterClass.TemplateOrBuilder>
        getTemplatesOrBuilderList() {
      return templates_;
    }
    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    public int getTemplatesCount() {
      return templates_.size();
    }
    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    public io.winhong.pass.hapi.chart.TemplateOuterClass.Template getTemplates(int index) {
      return templates_.get(index);
    }
    /**
     * <pre>
     * Templates for this chart.
     * </pre>
     *
     * <code>repeated .hapi.chart.Template templates = 2;</code>
     */
    public io.winhong.pass.hapi.chart.TemplateOuterClass.TemplateOrBuilder getTemplatesOrBuilder(
        int index) {
      return templates_.get(index);
    }

    public static final int DEPENDENCIES_FIELD_NUMBER = 3;
    private java.util.List<io.winhong.pass.hapi.chart.ChartOuterClass.Chart> dependencies_;
    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    public java.util.List<io.winhong.pass.hapi.chart.ChartOuterClass.Chart> getDependenciesList() {
      return dependencies_;
    }
    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    public java.util.List<? extends io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder>
        getDependenciesOrBuilderList() {
      return dependencies_;
    }
    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    public int getDependenciesCount() {
      return dependencies_.size();
    }
    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    public io.winhong.pass.hapi.chart.ChartOuterClass.Chart getDependencies(int index) {
      return dependencies_.get(index);
    }
    /**
     * <pre>
     * Charts that this chart depends on.
     * </pre>
     *
     * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
     */
    public io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder getDependenciesOrBuilder(
        int index) {
      return dependencies_.get(index);
    }

    public static final int VALUES_FIELD_NUMBER = 4;
    private io.winhong.pass.hapi.chart.ConfigOuterClass.Config values_;
    /**
     * <pre>
     * Default config for this template.
     * </pre>
     *
     * <code>optional .hapi.chart.Config values = 4;</code>
     */
    public boolean hasValues() {
      return values_ != null;
    }
    /**
     * <pre>
     * Default config for this template.
     * </pre>
     *
     * <code>optional .hapi.chart.Config values = 4;</code>
     */
    public io.winhong.pass.hapi.chart.ConfigOuterClass.Config getValues() {
      return values_ == null ? io.winhong.pass.hapi.chart.ConfigOuterClass.Config.getDefaultInstance() : values_;
    }
    /**
     * <pre>
     * Default config for this template.
     * </pre>
     *
     * <code>optional .hapi.chart.Config values = 4;</code>
     */
    public io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder getValuesOrBuilder() {
      return getValues();
    }

    public static final int FILES_FIELD_NUMBER = 5;
    private java.util.List<com.google.protobuf.Any> files_;
    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    public java.util.List<com.google.protobuf.Any> getFilesList() {
      return files_;
    }
    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    public java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
        getFilesOrBuilderList() {
      return files_;
    }
    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    public int getFilesCount() {
      return files_.size();
    }
    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    public com.google.protobuf.Any getFiles(int index) {
      return files_.get(index);
    }
    /**
     * <pre>
     * Miscellaneous files in a chart archive,
     * e.g. README, LICENSE, etc.
     * </pre>
     *
     * <code>repeated .google.protobuf.Any files = 5;</code>
     */
    public com.google.protobuf.AnyOrBuilder getFilesOrBuilder(
        int index) {
      return files_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (metadata_ != null) {
        output.writeMessage(1, getMetadata());
      }
      for (int i = 0; i < templates_.size(); i++) {
        output.writeMessage(2, templates_.get(i));
      }
      for (int i = 0; i < dependencies_.size(); i++) {
        output.writeMessage(3, dependencies_.get(i));
      }
      if (values_ != null) {
        output.writeMessage(4, getValues());
      }
      for (int i = 0; i < files_.size(); i++) {
        output.writeMessage(5, files_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (metadata_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getMetadata());
      }
      for (int i = 0; i < templates_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, templates_.get(i));
      }
      for (int i = 0; i < dependencies_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, dependencies_.get(i));
      }
      if (values_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getValues());
      }
      for (int i = 0; i < files_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, files_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.winhong.pass.hapi.chart.ChartOuterClass.Chart)) {
        return super.equals(obj);
      }
      io.winhong.pass.hapi.chart.ChartOuterClass.Chart other = (io.winhong.pass.hapi.chart.ChartOuterClass.Chart) obj;

      boolean result = true;
      result = result && (hasMetadata() == other.hasMetadata());
      if (hasMetadata()) {
        result = result && getMetadata()
            .equals(other.getMetadata());
      }
      result = result && getTemplatesList()
          .equals(other.getTemplatesList());
      result = result && getDependenciesList()
          .equals(other.getDependenciesList());
      result = result && (hasValues() == other.hasValues());
      if (hasValues()) {
        result = result && getValues()
            .equals(other.getValues());
      }
      result = result && getFilesList()
          .equals(other.getFilesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMetadata()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + getMetadata().hashCode();
      }
      if (getTemplatesCount() > 0) {
        hash = (37 * hash) + TEMPLATES_FIELD_NUMBER;
        hash = (53 * hash) + getTemplatesList().hashCode();
      }
      if (getDependenciesCount() > 0) {
        hash = (37 * hash) + DEPENDENCIES_FIELD_NUMBER;
        hash = (53 * hash) + getDependenciesList().hashCode();
      }
      if (hasValues()) {
        hash = (37 * hash) + VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getValues().hashCode();
      }
      if (getFilesCount() > 0) {
        hash = (37 * hash) + FILES_FIELD_NUMBER;
        hash = (53 * hash) + getFilesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.winhong.pass.hapi.chart.ChartOuterClass.Chart prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *	Chart is a helm package that contains metadata, a default config, zero or more
     *	optionally parameterizable templates, and zero or more charts (dependencies).
     * </pre>
     *
     * Protobuf type {@code hapi.chart.Chart}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hapi.chart.Chart)
        io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.winhong.pass.hapi.chart.ChartOuterClass.internal_static_hapi_chart_Chart_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.winhong.pass.hapi.chart.ChartOuterClass.internal_static_hapi_chart_Chart_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.winhong.pass.hapi.chart.ChartOuterClass.Chart.class, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder.class);
      }

      // Construct using io.winhong.pass.hapi.chart.ChartOuterClass.Chart.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTemplatesFieldBuilder();
          getDependenciesFieldBuilder();
          getFilesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (metadataBuilder_ == null) {
          metadata_ = null;
        } else {
          metadata_ = null;
          metadataBuilder_ = null;
        }
        if (templatesBuilder_ == null) {
          templates_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          templatesBuilder_.clear();
        }
        if (dependenciesBuilder_ == null) {
          dependencies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          dependenciesBuilder_.clear();
        }
        if (valuesBuilder_ == null) {
          values_ = null;
        } else {
          values_ = null;
          valuesBuilder_ = null;
        }
        if (filesBuilder_ == null) {
          files_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          filesBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.winhong.pass.hapi.chart.ChartOuterClass.internal_static_hapi_chart_Chart_descriptor;
      }

      public io.winhong.pass.hapi.chart.ChartOuterClass.Chart getDefaultInstanceForType() {
        return io.winhong.pass.hapi.chart.ChartOuterClass.Chart.getDefaultInstance();
      }

      public io.winhong.pass.hapi.chart.ChartOuterClass.Chart build() {
        io.winhong.pass.hapi.chart.ChartOuterClass.Chart result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.winhong.pass.hapi.chart.ChartOuterClass.Chart buildPartial() {
        io.winhong.pass.hapi.chart.ChartOuterClass.Chart result = new io.winhong.pass.hapi.chart.ChartOuterClass.Chart(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (metadataBuilder_ == null) {
          result.metadata_ = metadata_;
        } else {
          result.metadata_ = metadataBuilder_.build();
        }
        if (templatesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            templates_ = java.util.Collections.unmodifiableList(templates_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.templates_ = templates_;
        } else {
          result.templates_ = templatesBuilder_.build();
        }
        if (dependenciesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            dependencies_ = java.util.Collections.unmodifiableList(dependencies_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.dependencies_ = dependencies_;
        } else {
          result.dependencies_ = dependenciesBuilder_.build();
        }
        if (valuesBuilder_ == null) {
          result.values_ = values_;
        } else {
          result.values_ = valuesBuilder_.build();
        }
        if (filesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            files_ = java.util.Collections.unmodifiableList(files_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.files_ = files_;
        } else {
          result.files_ = filesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.winhong.pass.hapi.chart.ChartOuterClass.Chart) {
          return mergeFrom((io.winhong.pass.hapi.chart.ChartOuterClass.Chart)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.winhong.pass.hapi.chart.ChartOuterClass.Chart other) {
        if (other == io.winhong.pass.hapi.chart.ChartOuterClass.Chart.getDefaultInstance()) return this;
        if (other.hasMetadata()) {
          mergeMetadata(other.getMetadata());
        }
        if (templatesBuilder_ == null) {
          if (!other.templates_.isEmpty()) {
            if (templates_.isEmpty()) {
              templates_ = other.templates_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTemplatesIsMutable();
              templates_.addAll(other.templates_);
            }
            onChanged();
          }
        } else {
          if (!other.templates_.isEmpty()) {
            if (templatesBuilder_.isEmpty()) {
              templatesBuilder_.dispose();
              templatesBuilder_ = null;
              templates_ = other.templates_;
              bitField0_ = (bitField0_ & ~0x00000002);
              templatesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTemplatesFieldBuilder() : null;
            } else {
              templatesBuilder_.addAllMessages(other.templates_);
            }
          }
        }
        if (dependenciesBuilder_ == null) {
          if (!other.dependencies_.isEmpty()) {
            if (dependencies_.isEmpty()) {
              dependencies_ = other.dependencies_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureDependenciesIsMutable();
              dependencies_.addAll(other.dependencies_);
            }
            onChanged();
          }
        } else {
          if (!other.dependencies_.isEmpty()) {
            if (dependenciesBuilder_.isEmpty()) {
              dependenciesBuilder_.dispose();
              dependenciesBuilder_ = null;
              dependencies_ = other.dependencies_;
              bitField0_ = (bitField0_ & ~0x00000004);
              dependenciesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDependenciesFieldBuilder() : null;
            } else {
              dependenciesBuilder_.addAllMessages(other.dependencies_);
            }
          }
        }
        if (other.hasValues()) {
          mergeValues(other.getValues());
        }
        if (filesBuilder_ == null) {
          if (!other.files_.isEmpty()) {
            if (files_.isEmpty()) {
              files_ = other.files_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureFilesIsMutable();
              files_.addAll(other.files_);
            }
            onChanged();
          }
        } else {
          if (!other.files_.isEmpty()) {
            if (filesBuilder_.isEmpty()) {
              filesBuilder_.dispose();
              filesBuilder_ = null;
              files_ = other.files_;
              bitField0_ = (bitField0_ & ~0x00000010);
              filesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFilesFieldBuilder() : null;
            } else {
              filesBuilder_.addAllMessages(other.files_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.winhong.pass.hapi.chart.ChartOuterClass.Chart parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.winhong.pass.hapi.chart.ChartOuterClass.Chart) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata metadata_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata, io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.Builder, io.winhong.pass.hapi.chart.MetadataOuterClass.MetadataOrBuilder> metadataBuilder_;
      /**
       * <pre>
       * Contents of the Chartfile.
       * </pre>
       *
       * <code>optional .hapi.chart.Metadata metadata = 1;</code>
       */
      public boolean hasMetadata() {
        return metadataBuilder_ != null || metadata_ != null;
      }
      /**
       * <pre>
       * Contents of the Chartfile.
       * </pre>
       *
       * <code>optional .hapi.chart.Metadata metadata = 1;</code>
       */
      public io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata getMetadata() {
        if (metadataBuilder_ == null) {
          return metadata_ == null ? io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.getDefaultInstance() : metadata_;
        } else {
          return metadataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Contents of the Chartfile.
       * </pre>
       *
       * <code>optional .hapi.chart.Metadata metadata = 1;</code>
       */
      public Builder setMetadata(io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata value) {
        if (metadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          metadata_ = value;
          onChanged();
        } else {
          metadataBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Contents of the Chartfile.
       * </pre>
       *
       * <code>optional .hapi.chart.Metadata metadata = 1;</code>
       */
      public Builder setMetadata(
          io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.Builder builderForValue) {
        if (metadataBuilder_ == null) {
          metadata_ = builderForValue.build();
          onChanged();
        } else {
          metadataBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Contents of the Chartfile.
       * </pre>
       *
       * <code>optional .hapi.chart.Metadata metadata = 1;</code>
       */
      public Builder mergeMetadata(io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata value) {
        if (metadataBuilder_ == null) {
          if (metadata_ != null) {
            metadata_ =
              io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.newBuilder(metadata_).mergeFrom(value).buildPartial();
          } else {
            metadata_ = value;
          }
          onChanged();
        } else {
          metadataBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Contents of the Chartfile.
       * </pre>
       *
       * <code>optional .hapi.chart.Metadata metadata = 1;</code>
       */
      public Builder clearMetadata() {
        if (metadataBuilder_ == null) {
          metadata_ = null;
          onChanged();
        } else {
          metadata_ = null;
          metadataBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Contents of the Chartfile.
       * </pre>
       *
       * <code>optional .hapi.chart.Metadata metadata = 1;</code>
       */
      public io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.Builder getMetadataBuilder() {
        
        onChanged();
        return getMetadataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Contents of the Chartfile.
       * </pre>
       *
       * <code>optional .hapi.chart.Metadata metadata = 1;</code>
       */
      public io.winhong.pass.hapi.chart.MetadataOuterClass.MetadataOrBuilder getMetadataOrBuilder() {
        if (metadataBuilder_ != null) {
          return metadataBuilder_.getMessageOrBuilder();
        } else {
          return metadata_ == null ?
              io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.getDefaultInstance() : metadata_;
        }
      }
      /**
       * <pre>
       * Contents of the Chartfile.
       * </pre>
       *
       * <code>optional .hapi.chart.Metadata metadata = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata, io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.Builder, io.winhong.pass.hapi.chart.MetadataOuterClass.MetadataOrBuilder>
          getMetadataFieldBuilder() {
        if (metadataBuilder_ == null) {
          metadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata, io.winhong.pass.hapi.chart.MetadataOuterClass.Metadata.Builder, io.winhong.pass.hapi.chart.MetadataOuterClass.MetadataOrBuilder>(
                  getMetadata(),
                  getParentForChildren(),
                  isClean());
          metadata_ = null;
        }
        return metadataBuilder_;
      }

      private java.util.List<io.winhong.pass.hapi.chart.TemplateOuterClass.Template> templates_ =
        java.util.Collections.emptyList();
      private void ensureTemplatesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          templates_ = new java.util.ArrayList<io.winhong.pass.hapi.chart.TemplateOuterClass.Template>(templates_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.winhong.pass.hapi.chart.TemplateOuterClass.Template, io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder, io.winhong.pass.hapi.chart.TemplateOuterClass.TemplateOrBuilder> templatesBuilder_;

      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public java.util.List<io.winhong.pass.hapi.chart.TemplateOuterClass.Template> getTemplatesList() {
        if (templatesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(templates_);
        } else {
          return templatesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public int getTemplatesCount() {
        if (templatesBuilder_ == null) {
          return templates_.size();
        } else {
          return templatesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public io.winhong.pass.hapi.chart.TemplateOuterClass.Template getTemplates(int index) {
        if (templatesBuilder_ == null) {
          return templates_.get(index);
        } else {
          return templatesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public Builder setTemplates(
          int index, io.winhong.pass.hapi.chart.TemplateOuterClass.Template value) {
        if (templatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTemplatesIsMutable();
          templates_.set(index, value);
          onChanged();
        } else {
          templatesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public Builder setTemplates(
          int index, io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder builderForValue) {
        if (templatesBuilder_ == null) {
          ensureTemplatesIsMutable();
          templates_.set(index, builderForValue.build());
          onChanged();
        } else {
          templatesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public Builder addTemplates(io.winhong.pass.hapi.chart.TemplateOuterClass.Template value) {
        if (templatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTemplatesIsMutable();
          templates_.add(value);
          onChanged();
        } else {
          templatesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public Builder addTemplates(
          int index, io.winhong.pass.hapi.chart.TemplateOuterClass.Template value) {
        if (templatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTemplatesIsMutable();
          templates_.add(index, value);
          onChanged();
        } else {
          templatesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public Builder addTemplates(
          io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder builderForValue) {
        if (templatesBuilder_ == null) {
          ensureTemplatesIsMutable();
          templates_.add(builderForValue.build());
          onChanged();
        } else {
          templatesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public Builder addTemplates(
          int index, io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder builderForValue) {
        if (templatesBuilder_ == null) {
          ensureTemplatesIsMutable();
          templates_.add(index, builderForValue.build());
          onChanged();
        } else {
          templatesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public Builder addAllTemplates(
          java.lang.Iterable<? extends io.winhong.pass.hapi.chart.TemplateOuterClass.Template> values) {
        if (templatesBuilder_ == null) {
          ensureTemplatesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, templates_);
          onChanged();
        } else {
          templatesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public Builder clearTemplates() {
        if (templatesBuilder_ == null) {
          templates_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          templatesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public Builder removeTemplates(int index) {
        if (templatesBuilder_ == null) {
          ensureTemplatesIsMutable();
          templates_.remove(index);
          onChanged();
        } else {
          templatesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder getTemplatesBuilder(
          int index) {
        return getTemplatesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public io.winhong.pass.hapi.chart.TemplateOuterClass.TemplateOrBuilder getTemplatesOrBuilder(
          int index) {
        if (templatesBuilder_ == null) {
          return templates_.get(index);  } else {
          return templatesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public java.util.List<? extends io.winhong.pass.hapi.chart.TemplateOuterClass.TemplateOrBuilder>
           getTemplatesOrBuilderList() {
        if (templatesBuilder_ != null) {
          return templatesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(templates_);
        }
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder addTemplatesBuilder() {
        return getTemplatesFieldBuilder().addBuilder(
            io.winhong.pass.hapi.chart.TemplateOuterClass.Template.getDefaultInstance());
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder addTemplatesBuilder(
          int index) {
        return getTemplatesFieldBuilder().addBuilder(
            index, io.winhong.pass.hapi.chart.TemplateOuterClass.Template.getDefaultInstance());
      }
      /**
       * <pre>
       * Templates for this chart.
       * </pre>
       *
       * <code>repeated .hapi.chart.Template templates = 2;</code>
       */
      public java.util.List<io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder>
           getTemplatesBuilderList() {
        return getTemplatesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.winhong.pass.hapi.chart.TemplateOuterClass.Template, io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder, io.winhong.pass.hapi.chart.TemplateOuterClass.TemplateOrBuilder>
          getTemplatesFieldBuilder() {
        if (templatesBuilder_ == null) {
          templatesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.winhong.pass.hapi.chart.TemplateOuterClass.Template, io.winhong.pass.hapi.chart.TemplateOuterClass.Template.Builder, io.winhong.pass.hapi.chart.TemplateOuterClass.TemplateOrBuilder>(
                  templates_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          templates_ = null;
        }
        return templatesBuilder_;
      }

      private java.util.List<io.winhong.pass.hapi.chart.ChartOuterClass.Chart> dependencies_ =
        java.util.Collections.emptyList();
      private void ensureDependenciesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          dependencies_ = new java.util.ArrayList<io.winhong.pass.hapi.chart.ChartOuterClass.Chart>(dependencies_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.winhong.pass.hapi.chart.ChartOuterClass.Chart, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder, io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder> dependenciesBuilder_;

      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public java.util.List<io.winhong.pass.hapi.chart.ChartOuterClass.Chart> getDependenciesList() {
        if (dependenciesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dependencies_);
        } else {
          return dependenciesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public int getDependenciesCount() {
        if (dependenciesBuilder_ == null) {
          return dependencies_.size();
        } else {
          return dependenciesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public io.winhong.pass.hapi.chart.ChartOuterClass.Chart getDependencies(int index) {
        if (dependenciesBuilder_ == null) {
          return dependencies_.get(index);
        } else {
          return dependenciesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public Builder setDependencies(
          int index, io.winhong.pass.hapi.chart.ChartOuterClass.Chart value) {
        if (dependenciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependenciesIsMutable();
          dependencies_.set(index, value);
          onChanged();
        } else {
          dependenciesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public Builder setDependencies(
          int index, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder builderForValue) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.set(index, builderForValue.build());
          onChanged();
        } else {
          dependenciesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public Builder addDependencies(io.winhong.pass.hapi.chart.ChartOuterClass.Chart value) {
        if (dependenciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependenciesIsMutable();
          dependencies_.add(value);
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public Builder addDependencies(
          int index, io.winhong.pass.hapi.chart.ChartOuterClass.Chart value) {
        if (dependenciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependenciesIsMutable();
          dependencies_.add(index, value);
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public Builder addDependencies(
          io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder builderForValue) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.add(builderForValue.build());
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public Builder addDependencies(
          int index, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder builderForValue) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.add(index, builderForValue.build());
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public Builder addAllDependencies(
          java.lang.Iterable<? extends io.winhong.pass.hapi.chart.ChartOuterClass.Chart> values) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dependencies_);
          onChanged();
        } else {
          dependenciesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public Builder clearDependencies() {
        if (dependenciesBuilder_ == null) {
          dependencies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          dependenciesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public Builder removeDependencies(int index) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.remove(index);
          onChanged();
        } else {
          dependenciesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder getDependenciesBuilder(
          int index) {
        return getDependenciesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder getDependenciesOrBuilder(
          int index) {
        if (dependenciesBuilder_ == null) {
          return dependencies_.get(index);  } else {
          return dependenciesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public java.util.List<? extends io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder>
           getDependenciesOrBuilderList() {
        if (dependenciesBuilder_ != null) {
          return dependenciesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dependencies_);
        }
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder addDependenciesBuilder() {
        return getDependenciesFieldBuilder().addBuilder(
            io.winhong.pass.hapi.chart.ChartOuterClass.Chart.getDefaultInstance());
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder addDependenciesBuilder(
          int index) {
        return getDependenciesFieldBuilder().addBuilder(
            index, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.getDefaultInstance());
      }
      /**
       * <pre>
       * Charts that this chart depends on.
       * </pre>
       *
       * <code>repeated .hapi.chart.Chart dependencies = 3;</code>
       */
      public java.util.List<io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder>
           getDependenciesBuilderList() {
        return getDependenciesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.winhong.pass.hapi.chart.ChartOuterClass.Chart, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder, io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder>
          getDependenciesFieldBuilder() {
        if (dependenciesBuilder_ == null) {
          dependenciesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.winhong.pass.hapi.chart.ChartOuterClass.Chart, io.winhong.pass.hapi.chart.ChartOuterClass.Chart.Builder, io.winhong.pass.hapi.chart.ChartOuterClass.ChartOrBuilder>(
                  dependencies_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          dependencies_ = null;
        }
        return dependenciesBuilder_;
      }

      private io.winhong.pass.hapi.chart.ConfigOuterClass.Config values_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.chart.ConfigOuterClass.Config, io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder, io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder> valuesBuilder_;
      /**
       * <pre>
       * Default config for this template.
       * </pre>
       *
       * <code>optional .hapi.chart.Config values = 4;</code>
       */
      public boolean hasValues() {
        return valuesBuilder_ != null || values_ != null;
      }
      /**
       * <pre>
       * Default config for this template.
       * </pre>
       *
       * <code>optional .hapi.chart.Config values = 4;</code>
       */
      public io.winhong.pass.hapi.chart.ConfigOuterClass.Config getValues() {
        if (valuesBuilder_ == null) {
          return values_ == null ? io.winhong.pass.hapi.chart.ConfigOuterClass.Config.getDefaultInstance() : values_;
        } else {
          return valuesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Default config for this template.
       * </pre>
       *
       * <code>optional .hapi.chart.Config values = 4;</code>
       */
      public Builder setValues(io.winhong.pass.hapi.chart.ConfigOuterClass.Config value) {
        if (valuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          values_ = value;
          onChanged();
        } else {
          valuesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default config for this template.
       * </pre>
       *
       * <code>optional .hapi.chart.Config values = 4;</code>
       */
      public Builder setValues(
          io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder builderForValue) {
        if (valuesBuilder_ == null) {
          values_ = builderForValue.build();
          onChanged();
        } else {
          valuesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Default config for this template.
       * </pre>
       *
       * <code>optional .hapi.chart.Config values = 4;</code>
       */
      public Builder mergeValues(io.winhong.pass.hapi.chart.ConfigOuterClass.Config value) {
        if (valuesBuilder_ == null) {
          if (values_ != null) {
            values_ =
              io.winhong.pass.hapi.chart.ConfigOuterClass.Config.newBuilder(values_).mergeFrom(value).buildPartial();
          } else {
            values_ = value;
          }
          onChanged();
        } else {
          valuesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default config for this template.
       * </pre>
       *
       * <code>optional .hapi.chart.Config values = 4;</code>
       */
      public Builder clearValues() {
        if (valuesBuilder_ == null) {
          values_ = null;
          onChanged();
        } else {
          values_ = null;
          valuesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Default config for this template.
       * </pre>
       *
       * <code>optional .hapi.chart.Config values = 4;</code>
       */
      public io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder getValuesBuilder() {
        
        onChanged();
        return getValuesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Default config for this template.
       * </pre>
       *
       * <code>optional .hapi.chart.Config values = 4;</code>
       */
      public io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder getValuesOrBuilder() {
        if (valuesBuilder_ != null) {
          return valuesBuilder_.getMessageOrBuilder();
        } else {
          return values_ == null ?
              io.winhong.pass.hapi.chart.ConfigOuterClass.Config.getDefaultInstance() : values_;
        }
      }
      /**
       * <pre>
       * Default config for this template.
       * </pre>
       *
       * <code>optional .hapi.chart.Config values = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.winhong.pass.hapi.chart.ConfigOuterClass.Config, io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder, io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder>
          getValuesFieldBuilder() {
        if (valuesBuilder_ == null) {
          valuesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.winhong.pass.hapi.chart.ConfigOuterClass.Config, io.winhong.pass.hapi.chart.ConfigOuterClass.Config.Builder, io.winhong.pass.hapi.chart.ConfigOuterClass.ConfigOrBuilder>(
                  getValues(),
                  getParentForChildren(),
                  isClean());
          values_ = null;
        }
        return valuesBuilder_;
      }

      private java.util.List<com.google.protobuf.Any> files_ =
        java.util.Collections.emptyList();
      private void ensureFilesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          files_ = new java.util.ArrayList<com.google.protobuf.Any>(files_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> filesBuilder_;

      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public java.util.List<com.google.protobuf.Any> getFilesList() {
        if (filesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(files_);
        } else {
          return filesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public int getFilesCount() {
        if (filesBuilder_ == null) {
          return files_.size();
        } else {
          return filesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public com.google.protobuf.Any getFiles(int index) {
        if (filesBuilder_ == null) {
          return files_.get(index);
        } else {
          return filesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public Builder setFiles(
          int index, com.google.protobuf.Any value) {
        if (filesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilesIsMutable();
          files_.set(index, value);
          onChanged();
        } else {
          filesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public Builder setFiles(
          int index, com.google.protobuf.Any.Builder builderForValue) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          files_.set(index, builderForValue.build());
          onChanged();
        } else {
          filesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public Builder addFiles(com.google.protobuf.Any value) {
        if (filesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilesIsMutable();
          files_.add(value);
          onChanged();
        } else {
          filesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public Builder addFiles(
          int index, com.google.protobuf.Any value) {
        if (filesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilesIsMutable();
          files_.add(index, value);
          onChanged();
        } else {
          filesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public Builder addFiles(
          com.google.protobuf.Any.Builder builderForValue) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          files_.add(builderForValue.build());
          onChanged();
        } else {
          filesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public Builder addFiles(
          int index, com.google.protobuf.Any.Builder builderForValue) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          files_.add(index, builderForValue.build());
          onChanged();
        } else {
          filesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public Builder addAllFiles(
          java.lang.Iterable<? extends com.google.protobuf.Any> values) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, files_);
          onChanged();
        } else {
          filesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public Builder clearFiles() {
        if (filesBuilder_ == null) {
          files_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          filesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public Builder removeFiles(int index) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          files_.remove(index);
          onChanged();
        } else {
          filesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public com.google.protobuf.Any.Builder getFilesBuilder(
          int index) {
        return getFilesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public com.google.protobuf.AnyOrBuilder getFilesOrBuilder(
          int index) {
        if (filesBuilder_ == null) {
          return files_.get(index);  } else {
          return filesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
           getFilesOrBuilderList() {
        if (filesBuilder_ != null) {
          return filesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(files_);
        }
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public com.google.protobuf.Any.Builder addFilesBuilder() {
        return getFilesFieldBuilder().addBuilder(
            com.google.protobuf.Any.getDefaultInstance());
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public com.google.protobuf.Any.Builder addFilesBuilder(
          int index) {
        return getFilesFieldBuilder().addBuilder(
            index, com.google.protobuf.Any.getDefaultInstance());
      }
      /**
       * <pre>
       * Miscellaneous files in a chart archive,
       * e.g. README, LICENSE, etc.
       * </pre>
       *
       * <code>repeated .google.protobuf.Any files = 5;</code>
       */
      public java.util.List<com.google.protobuf.Any.Builder> 
           getFilesBuilderList() {
        return getFilesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
          getFilesFieldBuilder() {
        if (filesBuilder_ == null) {
          filesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                  files_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          files_ = null;
        }
        return filesBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hapi.chart.Chart)
    }

    // @@protoc_insertion_point(class_scope:hapi.chart.Chart)
    private static final io.winhong.pass.hapi.chart.ChartOuterClass.Chart DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.winhong.pass.hapi.chart.ChartOuterClass.Chart();
    }

    public static io.winhong.pass.hapi.chart.ChartOuterClass.Chart getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Chart>
        PARSER = new com.google.protobuf.AbstractParser<Chart>() {
      public Chart parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Chart(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Chart> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Chart> getParserForType() {
      return PARSER;
    }

    public io.winhong.pass.hapi.chart.ChartOuterClass.Chart getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hapi_chart_Chart_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hapi_chart_Chart_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026hapi/chart/chart.proto\022\nhapi.chart\032\027ha" +
      "pi/chart/config.proto\032\031hapi/chart/metada" +
      "ta.proto\032\031hapi/chart/template.proto\032\031goo" +
      "gle/protobuf/any.proto\"\312\001\n\005Chart\022&\n\010meta" +
      "data\030\001 \001(\0132\024.hapi.chart.Metadata\022\'\n\ttemp" +
      "lates\030\002 \003(\0132\024.hapi.chart.Template\022\'\n\014dep" +
      "endencies\030\003 \003(\0132\021.hapi.chart.Chart\022\"\n\006va" +
      "lues\030\004 \001(\0132\022.hapi.chart.Config\022#\n\005files\030" +
      "\005 \003(\0132\024.google.protobuf.AnyB#\n!cn.com.ch" +
      "inacloud.paas.hapi.chartb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.winhong.pass.hapi.chart.ConfigOuterClass.getDescriptor(),
          io.winhong.pass.hapi.chart.MetadataOuterClass.getDescriptor(),
          io.winhong.pass.hapi.chart.TemplateOuterClass.getDescriptor(),
          com.google.protobuf.AnyProto.getDescriptor(),
        }, assigner);
    internal_static_hapi_chart_Chart_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_hapi_chart_Chart_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hapi_chart_Chart_descriptor,
        new java.lang.String[] { "Metadata", "Templates", "Dependencies", "Values", "Files", });
    io.winhong.pass.hapi.chart.ConfigOuterClass.getDescriptor();
    io.winhong.pass.hapi.chart.MetadataOuterClass.getDescriptor();
    io.winhong.pass.hapi.chart.TemplateOuterClass.getDescriptor();
    com.google.protobuf.AnyProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
